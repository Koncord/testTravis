cmake_minimum_required(VERSION 3.12)
project(testTravisCI)

set(CMAKE_CXX_STANDARD 17)

if (WIN32)
    set(LIB_PATH .)
else ()
    set(LIB_PATH lib)
endif ()

add_executable(${CMAKE_PROJECT_NAME} main.cpp)

install(TARGETS ${CMAKE_PROJECT_NAME}
        RUNTIME DESTINATION .
        LIBRARY DESTINATION ${LIB_PATH}
        )

find_package(Git)

execute_process(
        COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
        RESULT_VARIABLE EXITCODE2
        OUTPUT_VARIABLE COMMIT_HASH
        OUTPUT_STRIP_TRAILING_WHITESPACE)

execute_process(
        COMMAND ${GIT_EXECUTABLE} describe --tags
        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
        RESULT_VARIABLE EXITCODE2
        OUTPUT_VARIABLE TAG_NAME
        OUTPUT_STRIP_TRAILING_WHITESPACE)

string(REPLACE "." ";" VERSION ${TAG_NAME})


list(GET VERSION 0 CPACK_PACKAGE_VERSION_MAJOR)
list(GET VERSION 1 CPACK_PACKAGE_VERSION_MINOR)
list(GET VERSION 2 CPACK_PACKAGE_VERSION_PATCH)

set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}-${COMMIT_HASH}")

if(WIN32)
    if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
        set(CPACK_SYSTEM_NAME win64)
    else()
        set(CPACK_SYSTEM_NAME win32)
    endif()
else()
    set(CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME})
endif()

set(CPACK_MONOLITHIC_INSTALL TRUE)

set(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}")

INCLUDE(CPack)

add_custom_target(cpack cpack -G 7Z .
        DEPENDS ${CMAKE_PROJECT_NAME})